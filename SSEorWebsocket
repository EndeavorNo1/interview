#### Server-Sent Events (SSE)
- 单向通信：SSE 是单向通信，只能由服务器向客户端发送消息。
- 基于 HTTP：SSE 基于传统的 HTTP 协议。它保持与服务器的一个长连接打开，服务器通过这个连接发送消息。
- 简单易用：在客户端，SSE 可以通过使用标准的 JavaScript API EventSource 来实现，无需额外的库或框架。
- 重连机制：如果连接断开，SSE 有自动重连的机制。
- 文本格式：SSE 仅支持文本数据格式，不支持二进制数据。
#### WebSockets
- 双向通信：WebSockets 提供全双工通信，允许服务器和客户端双向交换数据。
- 独立的协议：WebSockets 使用 ws（或加密的 wss）协议，与 HTTP 不同，它在握手阶段通过 HTTP 升级为 WebSocket 连接。
- 更复杂的客户端实现：需要使用 WebSocket API，这在所有现代浏览器中都是标准的，但比 SSE 更复杂一些。
- 不自动重连：如果 WebSocket 连接断开，需要开发者自行实现重连逻辑。
- 支持二进制数据：WebSockets 不仅支持文本数据，还支持二进制数据，这使其更适合需要传输图片、音频、视频等的应用。
使用场景
SSE 的使用场景：适合于那些只需要服务器到客户端的单向数据流的场景，例如实时新闻推送、股票价格更新等。
WebSockets 的使用场景：适合于需要双向通信的复杂应用，如在线游戏、聊天应用和实时协作工具。
